package io.dropwizard.pinot.healthcheck.configs.exception;

import lombok.Getter;

@Getter
public enum ErrorCode {

    NO_ENTITY_REGISTERED("NO_ENTITY_REGISTERED", false, 400),

    INVALID_TABLE_ENTITY("INVALID_TABLE_ENTITY", false, 400),

    EVENT_PARSING_ERROR("EVENT_PARSING_ERROR", false, 500),

    BAD_REQUEST("BAD_REQUEST", false, 400),

    DOMAIN_PARAMS_INITIALIZATION_FAILED("DOMAIN_PARAMS_INITIALIZATION_FAILED", false, 500),
    DOMAIN_PARAM_NOT_REGISTERED("DOMAIN_PARAM_NOT_REGISTERED", false, 500),

    PINOT_TABLE_INGESTION_TOPIC_NOT_FOUND("PINOT_TABLE_INGESTION_TOPIC_NOT_FOUND", false, 400),

    PINOT_TABLE_INGESTION_TOPIC_GET_ERROR("PINOT_TABLE_INGESTION_TOPIC_GET_ERROR", false, 400),

    PINOT_KAFKA_DAO_ERROR("PINOT_KAFKA_DAO_ERROR", false, 500),

    NULL_PARAM_NOT_ALLOWED("NULL_PARAM_NOT_ALLOWED", false, 400),

    INGESTION_PROCESSOR_REGISTRATION_FAILED("INGESTION_PROCESSOR_REGISTRATION_FAILED", false, 500),

    INGESTION_PROCESSOR_FOR_TABLE_NOT_REGISTERED("INGESTION_PROCESSOR_FOR_TABLE_NOT_FOUND", false, 500),

    DATASTORE_NOT_QUERYABLE_CURRENTLY("DATASTORE_NOT_QUERYABLE_CURRENTLY", false, 500),

    INGESTION_DISABLED_FOR_MERCHANT("INGESTION_DISABLED_FOR_MERCHANT", false, 400),

    INVALID_PINOT_QUERY("INVALID_PINOT_QUERY", false, 400),

    UNSUPPORTED_OPERATION_ERROR("UNSUPPORTED_OPERATION_ERROR", false, 400),
    JSON_SERIALIZATION_ERROR("JSON_SERIALIZATION_ERROR", false, 500),
    MERCHANT_DOMAIN_MAPPING_NOT_EXIST("MERCHANT_DOMAIN_MAPPING_NOT_EXIST", false, 400),

    INVALID_DOMAIN_ID("INVALID_DOMAIN_ID", false, 400),

    INCONSISTENT_INTERNAL_STATE("INCONSISTENT_INTERNAL_STATE", false, 500),

    DATAMART_NOT_MAPPED_TO_MERCHANT("DATAMART_NOT_MAPPED_TO_MERCHANT", false, 400),

    INVALID_DATAMART_ID("INVALID_DATAMART_ID", false, 400),

    TABLE_FOR_USECASE_NOT_EXIST("TABLE_FOR_USECASE_NOT_EXIST", false, 400),

    UNABLE_TO_RESOLVE_TABLE_FOR_QUERY("UNABLE_TO_RESOLVE_TABLE_FOR_QUERY", false, 400),

    INVALID_SCHEMA_ID("INVALID_SCHEMA_ID", false, 400),

    INVALID_TABLE_ID("INVALID_TABLE_ID", false, 400),

    INVALID_TEMPLATE_ID("INVALID_TEMPLATE_ID", false, 400),

    ID_GENERATION_FAILURE("ID_GENERATION_FAILURE", false, 500),

    FIELD_CANNOT_BE_SOURCED_FROM_TSTORE_ENTITY("FIELD_CANNOT_BE_SOURCED_FROM_TSTORE_ENTITY", false, 400),

    DATA_EXTRACTION_EXCEPTION("DATA_EXTRACTION_EXCEPTION", false, 500),

    UNREGISTERED_TSTORE_EVENT_EXCEPTION("UNREGISTERED_TSTORE_EVENT_EXCEPTION", false, 400),

    HYSTRIX_COMMAND_EXCEPTION("HYSTRIX_COMMAND_EXCEPTION", true, 500),

    UNKNOWN_INGESTION_ERROR("UNKNOWN_INGESTION_ERROR", true, 500),

    MERCHANTID_EXTRACTION_FAILED_FROM_ENTITY("MERCHANTID_EXTRACTION_FAILED_FROM_ENTITY", false, 500),

    TRANSACTION_PAIR_NOT_SUPPORTED("TRANSACTION_PAIR_NOT_SUPPORTED", false, 500),

    DAO_ERROR("DAO_ERROR", false, 500),

    KEYTAB_FETCH_ERROR("KEYTAB_FETCH_ERROR", false, 500),

    PINOT_DAO_ERROR("PINOT_DAO_ERROR", false, 500),

    QUERY_PROCESSING_ERROR("QUERY_PROCESSING_ERROR", false, 500),

    DAO_NOT_CREATED("DAO_NOT_CREATED", false, 400),

    DAO_CREATION_FAILED("DAO_CREATION_FAILED", false, 500),

    DAO_ALREADY_EXISTS("DAO_ALREADY_EXISTS", false, 400),

    DAO_CREATION_IN_MAINTENANCE_MODE_NOT_ALLOWED("DAO_CREATION_IN_MAINTENANCE_MODE_NOT_ALLOWED", false, 400)

    ;

    private final int httpstatuscode;

    private final String code;

    private final boolean stackTrace;

    ErrorCode(String code, boolean stackTrace, int httpstatuscode) {
        this.code = code;
        this.stackTrace = stackTrace;
        this.httpstatuscode = httpstatuscode;
    }
}
